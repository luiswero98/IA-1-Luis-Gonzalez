import random

def generate_data(n):
    data = []
    for _ in range(n):
        x = random.randint(1, 100)
        y = random.randint(1, 100)
        data.append((x, y))
    return data

#funcion para calcular los valores de beta 0, beta 1 y beta 2.
def calculate_coefficients(data):
    n = len(data)
    sum_x = sum_y = sum_x_squared = sum_x_cubed = sum_xy = sum_x_squared_y = 0
    for x, y in data:
        sum_x += x
        sum_y += y
        sum_x_squared += x ** 2
        sum_x_cubed += x ** 3
        sum_xy += x * y
        sum_x_squared_y += (x ** 2) * y
    denominador = n * sum_x_squared * sum_x_squared - sum_x ** 2 * sum_x_squared
    beta_2 = (n * sum_x_squared_y * sum_x_squared - sum_xy * sum_x_squared) / denominador
    beta_1 = (n * sum_xy * sum_x_squared - sum_x * sum_x_squared_y) / denominador
    beta_0 = (sum_y - beta_1 * sum_x - beta_2 * sum_x_squared) / n
    return beta_0, beta_1, beta_2

#funcion para calcular la prediccion aplicando la formula de regresion lineal cuadratica
def predict_y(x, beta_0, beta_1, beta_2):
    return beta_0 + beta_1 * x + beta_2 * x ** 2

#funcion para calcular r_Squared
def calculate_r_squared(data, beta_0, beta_1, beta_2):
    n = len(data)
    sum_residuals = sum_squared_residuals = 0
    for x, y in data:
        y_pred = predict_y(x, beta_0, beta_1, beta_2)
        residual = y - y_pred
        sum_residuals += residual
        sum_squared_residuals += residual ** 2
    mean_y = sum(y for _, y in data) / n
    ss_total = sum((y - mean_y) ** 2 for _, y in data)
    r_squared = 1 - (sum_squared_residuals / ss_total)
    return r_squared

#Generar datos random para predecir
data = generate_data(100)

# Calcular coeficiente utilizando beta 0, beta 1 y beta 2 de la funcion anterior
beta_0, beta_1, beta_2 = calculate_coefficients(data)

# Imprime la ecuacion de regresion cuadratica}
print(f"Ecuacion de regresion lineal cuadratica: y = {beta_0:.2f} + {beta_1:.2f} * x + {beta_2:.2f} * x^2")

# Predecir Y con un valor X que debemos ingresar
x_input = float(input("Ingrese el valor de X para predecir Y: "))
y_predicted = predict_y(x_input, beta_0, beta_1, beta_2)
print(f"El valor de X en prediccion de Y= {x_input}: {y_predicted:.2f}")

# calcular rquared en base al valor de x que se ingreso para predecir Y
r_squared = calculate_r_squared(data, beta_0, beta_1, beta_2)
print(f"Valor R-squared: {r_squared:.2f}")
